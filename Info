MVC(Model - View - Controller)
  - Model - логика работы с данными
  - View - логика представления, интерфейс
  - Controller - логика навигации, обработка запросов
MVC - паттерн проектирования приложения

Controller(Контроллер) - реализуется нами, и он:
   - Обрабатывает запрос от пользователя
   - Обменивается данными с моделью
   - Показывает пользователю правильное представление
   - Переадресовывает пользователя на другие страницы

Model(Модель) - реализуется нами, и она:
   - Хранит в себе данные
   - Взаимодействует с БД для получения данных
   - Отдаёт данные контроллеру

View(Представление) - предоставление реализуется нами, и оно:
   - Получает данные от контроллера и отображает их в браузере
   - Для динамического отображения данных используются шаблонизаторы(Thymeleaf(мы будем использовать его), Freemarker, Velocity)

@Controller - аннотирует класс, и помещает Java класс Контроллером, там мы сможем обрабатывать пользователем http запросы

Что я сделаю в Spring проекте:
- Создам новое пустое Spring приложение
- Подключу Tomcat к идеешке(что бы удобно было запускать сервер прямо из идеешки)
- Добавлю зависимости в pom.xml                             | -
                                                               > На след уроке реализуем на Java
- Реализую web.xml файл(где будет html, css, java script)   | -
- Реализую applicationContext
- Реализую контроллер

Сервер(Tomcat) - это место, где наше Spring MVC приложение будет работать и то место откуда мы будем обращаться из браузера

Какие зависимости используются:
- Spring Core
- Spring Context
- Spring Web
- Spring WebMVC
- thymeleaf-spring5(шаблонизатор для динамического отображения данных)

Зачем нужен файл web.xml - сервер apache tomcat считывает файл web.xml и здесь мы описываем что бы сервер делал, в нашем случае мы хотим что бы сервер все http запросы от пользователей перенаправлял на "диспатчер сервлет" и когда запрос будет попадать сначала в сервер а потом в "диспатчер сервлет" этот запрос будет попадать в наше Spring приложение.

В этом уроке мы будем конфигурировать наш сервер с помощью xml и с помощью web.xml потому что этот способ кое где используются а в след уроке мы это сделаем с помощью Java кода.

@Controller - аннотация @ComponentScan работает с @Controller так же, как и просто с @Component.
@Controller - тот же @Component, но с доп. возможностями

Методы @Controller:
 - @GetMapping
 - @PostMapping
 - @PutMapping
 - @DeleteMapping
 - @PatchMapping